#We can provide a default value while creating a function. 
#This way the function assumes a default value even if a value is not provided in the function call for that argument.

def name(fname, mname = "Jhon", lname = "Whatson"):
    print("Hello,", fname, mname, lname)

name("Amy")


# We can provide arguments with key = value, this way the interpreter recognizes the arguments by the parameter name. 
# Hence, the the order in which the arguments are passed does not matter.
def name(fname, mname, lname):
    print("Hello,", fname, mname, lname)

name(mname = "Peter", lname = "Wesker", fname = "Jade")

#In case we donâ€™t pass the arguments with a key = value syntax, 
# then it is necessary to pass the arguments in the correct positional order and 
# the number of arguments passed should match with actual function definition.
def name(fname, mname, lname):
    print("Hello,", fname, mname, lname)

name("Peter", "Quill", "Maxwell")

#Arbitrary Arguments:
#While creating a function, pass a * before the parameter name while defining the function. 
#The function accesses the arguments by processing them in the form of tuple.
def name(*name):
    print("Hello,", name[0], name[1], name[2])

name("James", "Buchanan", "Barnes")
print(type(name))

#Keyword Arbitrary Arguments:
#While creating a function, pass a ** before the parameter name while defining the function. 
#The function accesses the arguments by processing them in the form of dictionary.

def name(**name):
    print("Hello,", name["fname"], name["mname"], name["lname"])

name(mname = "Buchanan", lname = "Barnes", fname = "James")